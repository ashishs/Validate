using System.Collections.Generic;
using NUnit.Framework;
using Validate.Extensions;

namespace Validate.UnitTests
{
    [TestFixture]
    public class ValidatorTests_IsNull
    {
        [Test]
        public void ShouldPassForIsNull()
        {
            List<string> values = null;
            var validator = values.Validate().IsNull(v => v, "Values should be null");
            Assert.IsTrue(validator.IsValid);
        }
        
        [Test]
        public void ShouldFailForIsNull()
        {
            List<string> values = new List<string>();
            var validator = values.Validate().IsNull(v => v, "Values should be null");
            Assert.IsFalse(validator.IsValid);
            Assert.That(validator.Errors[0].Message, Is.EqualTo("Values should be null"));
        }

        [Test]
        public void ShouldBeAbleToVerifyAutoGeneratedValidationMessage1()
        {
            List<string> values = new List<string>();
            var validator = values.Validate().IsNull(v => v);
            Assert.That(validator.Errors[0].Message, Is.EqualTo("List`1[String].{{ Target member could not be determined }} should be null."));
        }

        [Test]
        public void ShouldBeAbleToVerifyAutoGeneratedValidationMessage2()
        {
            var person = new Person{Name = "Some Name", HomeAddress = new Address{AddressLine1 = "Line 1"}};
            var validator = person.Validate(new ValidationOptions{StopOnFirstError = false})
                            .IsNull(p => p.Name)
                            .IsNull(p => p.HomeAddress.AddressLine1);
            Assert.That(validator.Errors[0].Message, Is.EqualTo("Person.Name should be null."));
            Assert.That(validator.Errors[1].Message, Is.EqualTo("Address.AddressLine1 should be null."));
        }
    }
}